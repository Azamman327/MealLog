/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.53
 * Generated at: 2022-09-29 17:03:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>meal:log</title>\r\n");
      out.write("	<script src=\"https://code.iconify.design/iconify-icon/1.0.0/iconify-icon.min.js\"></script>\r\n");
      out.write("	<link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"resources/favicon/apple-icon-57x57.png\">\r\n");
      out.write("	<link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"resources/favicon//apple-icon-60x60.png\">\r\n");
      out.write("	<link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"resources/favicon//apple-icon-72x72.png\">\r\n");
      out.write("	<link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"resources/favicon//apple-icon-76x76.png\">\r\n");
      out.write("	<link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"resources/favicon//apple-icon-114x114.png\">\r\n");
      out.write("	<link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"resources/favicon//apple-icon-120x120.png\">\r\n");
      out.write("	<link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"resources/favicon//apple-icon-144x144.png\">\r\n");
      out.write("	<link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"resources/favicon//apple-icon-152x152.png\">\r\n");
      out.write("	<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"resources/favicon//apple-icon-180x180.png\">\r\n");
      out.write("	<link rel=\"icon\" type=\"image/png\" sizes=\"192x192\"  href=\"resources/favicon//android-icon-192x192.png\">\r\n");
      out.write("	<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"resources/favicon//favicon-32x32.png\">\r\n");
      out.write("	<link rel=\"icon\" type=\"image/png\" sizes=\"96x96\" href=\"resources/favicon//favicon-96x96.png\">\r\n");
      out.write("	<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"resources/favicon//favicon-16x16.png\">\r\n");
      out.write("	<link rel=\"manifest\" href=\"resources/favicon//manifest.json\">\r\n");
      out.write("	<meta name=\"msapplication-TileColor\" content=\"#ffffff\">\r\n");
      out.write("	<meta name=\"msapplication-TileImage\" content=\"resources/favicon//ms-icon-144x144.png\">\r\n");
      out.write("	<meta name=\"theme-color\" content=\"#ffffff\">\r\n");
      out.write("	\r\n");
      out.write("	<link rel=\"stylesheet\" href=\"resources/css/index.css\"/>\r\n");
      out.write("	<script defer>\r\n");
      out.write("		function init() {\r\n");
      out.write("			var lis = document.querySelectorAll('.Nav li');\r\n");
      out.write("		\r\n");
      out.write("			for(var i = 0; i < lis.length; i++) {\r\n");
      out.write("				lis[i].setAttribute('onClick', 'lis_select(this)');\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		function lis_select(e) {\r\n");
      out.write("			var before = document.querySelector('.Nav .select');\r\n");
      out.write("			before.className = '';\r\n");
      out.write("			\r\n");
      out.write("			e.className = 'select';\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body onload='init()'>\r\n");
      out.write("	<div class='Header'>\r\n");
      out.write("		<div class='title'>\r\n");
      out.write("			<div class='yolk'></div>\r\n");
      out.write("			<iconify-icon icon=\"fluent:food-egg-24-regular\"></iconify-icon>\r\n");
      out.write("			Meal:<span>Log</span>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div class='greet'>\r\n");
      out.write("			<iconify-icon icon=\"healthicons:ui-user-profile\"></iconify-icon>\r\n");
      out.write("			박솜솜님, 식사 맛있게 하셨나요? 식단을 그룹원들에게 공유해보세요\r\n");
      out.write("			<div class='logout'>\r\n");
      out.write("				<iconify-icon icon=\"icon-park:logout\"></iconify-icon>\r\n");
      out.write("				로그아웃\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("		\r\n");
      out.write("	</div>\r\n");
      out.write("	<div class='Nav'>\r\n");
      out.write("		<ul>\r\n");
      out.write("			<li>피드</li>\r\n");
      out.write("			<li>식단 추천</li>\r\n");
      out.write("			<li>그룹 매칭</li>\r\n");
      out.write("			<li class='select'>마이페이지</li>\r\n");
      out.write("		</ul>\r\n");
      out.write("	</div>\r\n");
      out.write("	<div class='Content'>\r\n");
      out.write("		");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/mypage/mypage.jsp", out, false);
      out.write(" <!-- 알갱이 만든걸 여기 경로 넣어서 적용 -->\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
